pipeline {
    agent any
    
    stages {
        stage("Pull Image from Docker Hub") {
            steps {
                echo "Pulling the Docker image from Docker Hub"
                sh "docker pull harshrathore24/my-note-app:latest"
            }
        }
        
        stage("Run Docker Container") {
            steps {
                echo "Stopping and removing any existing container with the same name"
                sh "docker stop test_version || true"
                sh "docker rm test_version || true"
                
                echo "Running the container"
                sh "docker run -d -p 8800:8000 --name test_version harshrathore24/my-note-app:latest"
            }
        }
        
        stage("Tag and Push to Docker Hub") {
            steps {
                echo "Determining the next version tag"
                script {
                    def imageName = "harshrathore24/my-note-app"
                    def credentialsId = 'dockerHub'
                    def tagPrefix = "latest.v"
                    
                    withCredentials([usernamePassword(credentialsId: credentialsId, passwordVariable: 'dockerHubPass', usernameVariable: 'dockerHubUser')]) {
                        def existingTags = sh(script: "curl -s -u ${dockerHubUser}:${dockerHubPass} https://hub.docker.com/v2/repositories/${imageName}/tags/?page_size=100 | jq -r '.results[].name'", returnStdout: true).trim().split('\n')
                        def maxVersion = existingTags.findAll { it.startsWith(tagPrefix) }
                                                       .collect { it.replace(tagPrefix, '').toInteger() }
                                                       .max() ?: 0
                        def nextVersion = maxVersion + 1
                        def newTag = "${tagPrefix}${nextVersion}"
                        
                        echo "Tagging the image with the new version: ${newTag}"
                        sh "docker tag ${imageName}:latest ${imageName}:${newTag}"

                        echo "Pushing the image to Docker Hub"
                        sh "docker login -u ${dockerHubUser} -p ${dockerHubPass}"
                        sh "docker push ${imageName}:${newTag}"
                    }
                }
            }
        }
    }
}
