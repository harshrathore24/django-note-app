pipeline {
    agent any
    
    parameters {
        string(name: 'VERSION_TAG', defaultValue: 'latest', description: 'The version tag for the Docker image')
    }
     environment {
        DOCKER_TAG = "my-note-app:${params.VERSION_TAG}"
     }
    
    stages {
        stage("Clone Code") {
            steps {
                echo "Cloning the code"
                git url: "https://github.com/harshrathore24/django-note-app.git", branch: "main"
            }
        }
   }
   stage("Build and Run") {
            steps {
                script {
                    echo "Using provided version tag"
                    env.DOCKER_TAG = "my-note-app:${params.VERSION_TAG}"
                }

                echo "Building the image with tag ${env.DOCKER_TAG}"
                sh "docker build -t ${env.DOCKER_TAG} ."
                
                echo "Stopping and removing any existing container with the same name"
                sh "docker stop my-note || true"
                sh "docker rm my-note || true"
                
                echo "Running the container"
                sh "docker run -d -p 8000:8000 --name my-note ${env.DOCKER_TAG}"
            }
        }

        stage("Tag and Push to Docker Hub") {
            steps {
                echo "Tagging the image with the version parameter"
                script {
                    def imageName = "harshrathore24/my-note-app"
                    def credentialsId = 'dockerHub'
                    def userVersion = "${params.VERSION}"

                    withCredentials([usernamePassword(credentialsId: credentialsId, passwordVariable: 'dockerHubPass', usernameVariable: 'dockerHubUser')]) {
                        def newTag = "v${userVersion}"

                        echo "Tagging the image with the new version: ${newTag}"
                        sh "docker tag ${imageName}:latest ${imageName}:${newTag}"

                        echo "Pushing the image to Docker Hub"
                        sh "docker login -u ${dockerHubUser} -p ${dockerHubPass}"
                        sh "docker push ${imageName}:${newTag}"
                    }
                }
            }
        }
}
